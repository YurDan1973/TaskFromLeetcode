package Task_69;

class Solution_69 {
    public static int mySqrt(int x) {
// Для особых случаев, когда x равно 0 или 1, верните x.
        if (x == 0 || x == 1)
            return x;

// Инициализируйте диапазон поиска квадратного корня.
        int start = 1;
        int end = x;
        int mid = -1;

// Выполните двоичный поиск, чтобы найти квадратный корень из x.
        while (start <= end) {
// Вычислите среднюю точку, используя "start + (end - начало) / 2", чтобы избежать переполнения целых чисел.
            mid = start + (end - start) / 2;

// Если квадрат среднего значения больше x, переместите "конец" влево (середина - 1).
            if ((long) mid * mid > (long) x)
                end = mid - 1;
            else if (mid * mid == x)
// Если квадрат среднего значения равен x, то мы нашли квадратный корень.
                return mid;
            else
// Если квадрат среднего значения меньше x, переместите "начало" вправо (середина + 1).
                start = mid + 1;
        }

// Цикл завершается, когда "start" становится больше, чем "end", а "end" - это целое значение квадратного корня.
// Однако, поскольку мы, возможно, использовали целочисленное деление в вычислениях,
// мы округляем значение "end" в меньшую сторону до ближайшего целого числа, чтобы получить правильный квадратный корень.
        return Math.round(end);
    }
}